// SPDX-License-Identifier: MIT

// Amended by HashLips
/**
    !Disclaimer!
    These contracts have been used to create tutorials,
    and was created for the purpose to teach people
    how to create smart contracts on the blockchain.
    please review this code on your own before using any of
    the following code for production.
    HashLips will not be liable in any way if for the use 
    of the code. That being said, the code has been tested 
    to the best of the developers' knowledge to work as intended.
*/
pragma solidity >=0.7.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./Base64.sol";

contract OnChainNft is ERC721Enumerable, Ownable {
  using Strings for uint256;

  string[] public wordValues = ["accomplish", "accepted", "absolutely", "admire", "achievement", "active"];

  struct Word {
      string name;
      string description;
      string bgHue;
      string textHue;
      string value;
  }
 
 mapping(uint256 => Word) public words;

  constructor() ERC721("On Chain NFT", "OCN") {}

  // public
  function mint() public payable {
    uint256 supply = totalSupply();
    require(supply + 1 <= 10000);

    Word memory newWord = Word(
       string(abi.encodePacked('OCN #', uint256(supply + 1).toString())),
       "This is My Cool On Chain NFT",
       randomNum(361,block.difficulty, supply).toString(),
       randomNum(361,block.timestamp, supply).toString(),
       wordValues[randomNum(wordValues.length, block.difficulty, supply )]

    
    );

    if (msg.sender != owner()) {
      require(msg.value >= 0.005 ether);
    }
    words[supply + 1] = newWord;
      _safeMint(msg.sender, supply + 1);
    }

function randomNum(uint256 _mod, uint256 _seed, uint256 _salt) public view returns(uint256){
    uint256 num = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, _seed, _salt)))% _mod;
    return num;
}

    function buildImage(uint256 _tokenId)public view returns(string memory){
      Word memory currentWord = words [_tokenId];
        return Base64.encode(bytes(abi.encodePacked(
            '<svg width="500" height="500" xmlns="http://www.w3.org/2000/svg">',
            '<rect stroke="#000" height="500" width="500" fill="hsl(',currentWord.bgHue,',50%,25%)"/>',
            '<text dominant-baseline="middle"  fill="hsl(',currentWord.textHue,'100%,80%)"  x="50%" y="50%"  font-size="41"  text-anchor="middle">',currentWord.value,'</text>',
            '</svg>'
        )));
    }
   
  function tokenURI(uint256 _tokenId)
    public
    view
    virtual
    override
    returns (string memory)
  {
    require(
      _exists(_tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );
    Word memory currentWord = words [_tokenId];
    return string(abi.encodePacked(
        'data:application/json;base64,', Base64.encode(bytes(abi.encodePacked(
            '{"name":"',
            currentWord.name,
            '", "description":"',
            currentWord.description,
            '", "image": "',
            'data:image/svg+xml;base64,',
            buildImage(_tokenId),
            '"}')))));
  }     


  //only owner
  function withdraw() public payable onlyOwner {
    
    (bool success, ) = payable(msg.sender).call{value: address(this).balance }("");
    require(success);
    
  }
}